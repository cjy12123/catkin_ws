// Generated by gencpp from file f450_vision/box.msg
// DO NOT EDIT!


#ifndef F450_VISION_MESSAGE_BOX_H
#define F450_VISION_MESSAGE_BOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f450_vision
{
template <class ContainerAllocator>
struct box_
{
  typedef box_<ContainerAllocator> Type;

  box_()
    : box_center_X(0.0)
    , box_center_Y(0.0)
    , box_center_W(0.0)
    , box_center_H(0.0)  {
    }
  box_(const ContainerAllocator& _alloc)
    : box_center_X(0.0)
    , box_center_Y(0.0)
    , box_center_W(0.0)
    , box_center_H(0.0)  {
  (void)_alloc;
    }



   typedef float _box_center_X_type;
  _box_center_X_type box_center_X;

   typedef float _box_center_Y_type;
  _box_center_Y_type box_center_Y;

   typedef float _box_center_W_type;
  _box_center_W_type box_center_W;

   typedef float _box_center_H_type;
  _box_center_H_type box_center_H;





  typedef boost::shared_ptr< ::f450_vision::box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f450_vision::box_<ContainerAllocator> const> ConstPtr;

}; // struct box_

typedef ::f450_vision::box_<std::allocator<void> > box;

typedef boost::shared_ptr< ::f450_vision::box > boxPtr;
typedef boost::shared_ptr< ::f450_vision::box const> boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f450_vision::box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f450_vision::box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f450_vision::box_<ContainerAllocator1> & lhs, const ::f450_vision::box_<ContainerAllocator2> & rhs)
{
  return lhs.box_center_X == rhs.box_center_X &&
    lhs.box_center_Y == rhs.box_center_Y &&
    lhs.box_center_W == rhs.box_center_W &&
    lhs.box_center_H == rhs.box_center_H;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f450_vision::box_<ContainerAllocator1> & lhs, const ::f450_vision::box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f450_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f450_vision::box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f450_vision::box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f450_vision::box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f450_vision::box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f450_vision::box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f450_vision::box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f450_vision::box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1a4a641427c15bc39cb4de0679f2e54";
  }

  static const char* value(const ::f450_vision::box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1a4a641427c15bcULL;
  static const uint64_t static_value2 = 0x39cb4de0679f2e54ULL;
};

template<class ContainerAllocator>
struct DataType< ::f450_vision::box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f450_vision/box";
  }

  static const char* value(const ::f450_vision::box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f450_vision::box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 box_center_X\n"
"float32 box_center_Y\n"
"float32 box_center_W\n"
"float32 box_center_H\n"
;
  }

  static const char* value(const ::f450_vision::box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f450_vision::box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_center_X);
      stream.next(m.box_center_Y);
      stream.next(m.box_center_W);
      stream.next(m.box_center_H);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f450_vision::box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f450_vision::box_<ContainerAllocator>& v)
  {
    s << indent << "box_center_X: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_X);
    s << indent << "box_center_Y: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_Y);
    s << indent << "box_center_W: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_W);
    s << indent << "box_center_H: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_H);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F450_VISION_MESSAGE_BOX_H
